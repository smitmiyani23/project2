---
title: "Project 2"
format: html
editor: visual
---

## Purpose

Writing query functions for openFDA API used in Project 2.

## Finding Data

The chosen API is openFDA, provided by the food and drug administration. Specifically it looks at adverse events reported by hospitals, clinics and veterinary centers. It started recordkeeeping from Jan 1 2004.

## Writing Functions

### Creating Contingency tables Query

#### Humans

```{r}
human_contig_table_url <- function(start_date, end_date, patient_sex = NULL, age_min = NULL, age_max = NULL, cat_var) {
  base_url <- "https://api.fda.gov/drug/event.json?search="
  
  date_range <- paste0("receivedate:[", start_date, "+TO+", end_date, "]")
  
  query <- date_range
  
  if (!is.null(patient_sex)) {
    sex <- paste0("patient.patientsex:", patient_sex)
    query <- paste0(query, "+AND+", sex)
  }
  
  if (!is.null(age_min) && !is.null(age_max)) {
    age_range <- paste0("patient.patientonsetage:[", age_min, "+TO+", age_max, "]")
    query <- paste0(query, "+AND+", age_range)
  }
  
  full_url <- paste0(base_url, query, "&count=", cat_var)
  
  return(full_url)
}

```

```{r}
start_date <- "20040101"
end_date <- "20240709"
patient_sex <- 1 # Male
age_min <- 5
age_max <- 17
cat_var <- "patient.reaction.reactionmeddrapt.exact"

h_contig_url <- human_contig_table_url(start_date, end_date,cat_var =  cat_var)

h_contig_url
```

#### Animals

```{r}
animal_contig_table_url <- function(animal_species = NULL, cat_var) {
  base_url <- "https://api.fda.gov/animalandveterinary/event.json?search="
  
  if (!is.null(animal_species)) {
    animal_query <- paste0("animal.species:", animal_species)
    query <- paste0(animal_query)
  } else {
    query <- ""
  }
  
  full_url <- paste0(base_url, query, "&count=", cat_var)
  
  return(full_url)
}

```

```{r}

a_contig_url <- animal_contig_table_url(animal_species = "Horse", cat_var ="reaction.veddra_term_name.exact" )
a_contig_url
```

### Creating Subset tables Query

#### Humans

```{r}
human_subset_url <- function(start_date, end_date, patient_sex = NULL, age_min = NULL, age_max = NULL) {
  base_url <- "https://api.fda.gov/drug/event.json?search="
  
  date_range <- paste0("receivedate:[", start_date, "+TO+", end_date, "]")
  
  query <- date_range
  
  if (!is.null(patient_sex)) {
    sex <- paste0("patient.patientsex:", patient_sex)
    query <- paste0(query, "+AND+", sex)
  }
  
  if (!is.null(age_min) && !is.null(age_max)) {
    age_range <- paste0("patient.patientonsetage:[", age_min, "+TO+", age_max, "]")
    query <- paste0(query, "+AND+", age_range)
  }
  
  full_url <- paste0(base_url, query, "&limit=1000")
  
  return(full_url)
}
```

```{r}
h_subset_url <- human_subset_url(start_date, end_date)

h_subset_url
```

#### Animals

```{r}
animal_subset_url <- function(animal_species = NULL) {
  base_url <- "https://api.fda.gov/animalandveterinary/event.json?search="
  
  if (!is.null(animal_species)) {
    animal_query <- paste0("animal.species:", animal_species)
    query <- paste0(animal_query)
  } else {
    query <- ""
  }
  
  full_url <- paste0(base_url, query, "&limit=1000")
  
  return(full_url)
}
```

```{r}
a_subset_url <- animal_subset_url()
a_subset_url
```

```{r}
library(httr)
library(jsonlite)
library(tidyverse)
```

```{r}
h_contig_data <- GET(h_contig_url)
h_contig_data <- rawToChar(h_contig_data$content)
h_contig_data <- fromJSON(h_contig_data)
head(h_contig_data$results)
```

```{r}
a_subset_data <- GET(a_subset_url)
a_subset_data <- rawToChar(a_subset_data$content)
a_subset_data <- fromJSON(a_subset_data)
head(a_subset_data$results)
```

```{r}
head(a_subset_data$results$duration)
```

```{r}
sd(as.numeric(a_subset_data$results$duration$value),na.rm = TRUE)
```

```{r}
a_subset_data$results$number_of_animals_treated <- as.numeric(a_subset_data$results$number_of_animals_treated)
```

```{r}
h_subset_data <- GET(h_subset_url)
h_subset_data <- rawToChar(h_subset_data$content)
h_subset_data <- fromJSON(h_subset_data)
head(h_subset_data$results)
```

```{r}
max(as.numeric(h_subset_data$results$seriousnessdisabling))
```

## Graphs:

```{r}
library(ggplot2)
```

#### Facetted Pie Charts using Animal Reactions

```{r}
api_query <- function (query_url) {
  response <- GET(query_url)
  data <- rawToChar(response$content)
  result <- fromJSON(data)
  return(result$results)
}
```

```{r}
species <- c("Cat","Dog","Horse","Cattle")
urls <- list()
for (i in seq(1:length(species))) {
  urls[i] <- animal_contig_table_url(animal_species = species[i], cat_var = "reaction.veddra_term_name.exact")
  
}
urls
```

```{r}
df_lists <- lapply(urls, api_query)
names(df_lists) <- species
```

```{r}
combine_data <- function(df_list, names_list) {
    combined_data <- bind_rows(
        lapply(seq_along(df_list), function(i) {
            df <- df_list[[i]][1:5,]
            df$animal_type <- names_list[i]
            return(df)
        })
    )
    return(combined_data)
}

combined_data <- combine_data(df_lists, names(df_lists))
```

```{r}
combined_data
```

```{r}

ggplot(combined_data, aes(x = term, y = count, fill = term)) +
    geom_bar( stat = "identity") +
    facet_wrap(~ animal_type) +
    theme_minimal() +
    theme(legend.position = "bottom") +
    labs(title = "Facetted Bar Charts") +
    theme(axis.text.x = element_blank())
```

```{r}
head(a_subset_data$results)
```

```{r}
animal_subset <- a_subset_data$results
animal_subset$animal_type <- animal_subset$animal$species
animal_subset$treatment_duration <- as.numeric(animal_subset$duration$value)
head(animal_subset)
```

```{r}
library(see)
library(easystats)

ggplot(animal_subset[animal_subset$animal_type %in% c("Cat","Dog","Horse","Cattle"),], aes(x = animal_type, y = treatment_duration, fill = animal_type)) +
  geom_violindot(fill_dots = "black") +
  theme_modern() +
  scale_fill_material_d()
```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).
