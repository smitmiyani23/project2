---
title: "Project 2"
format: html
editor: visual
---

## Purpose

Writing query functions for openFDA API used in Project 2.

## Finding Data

The chosen API is openFDA, provided by the food and drug administration. Specifically it looks at adverse events reported by hospitals, clinics and veterinary centers. It started recordkeeeping from Jan 1 2004.

## Writing Functions

### Creating Contingency tables Query

#### Humans

```{r}
human_contig_table_url <- function(start_date, end_date, patient_sex = NULL, age_min = NULL, age_max = NULL, cat_var) {
  base_url <- "https://api.fda.gov/drug/event.json?search="
  
  date_range <- paste0("receivedate:[", start_date, "+TO+", end_date, "]")
  
  query <- date_range
  
  if (!is.null(patient_sex)) {
    sex <- paste0("patient.patientsex:", patient_sex)
    query <- paste0(query, "+AND+", sex)
  }
  
  if (!is.null(age_min) && !is.null(age_max)) {
    age_range <- paste0("patient.patientonsetage:[", age_min, "+TO+", age_max, "]")
    query <- paste0(query, "+AND+", age_range)
  }
  
  full_url <- paste0(base_url, query, "&count=", cat_var)
  
  return(full_url)
}

```

```{r}
start_date <- "20040101"
end_date <- "20240709"
patient_sex <- 1 # Male
age_min <- 5
age_max <- 17
cat_var <- "patient.reaction.reactionmeddrapt.exact"

h_contig_url <- human_contig_table_url(start_date, end_date,cat_var =  cat_var)

h_contig_url
```

#### Animals

```{r}
animal_contig_table_url <- function(animal_species = NULL, cat_var) {
  base_url <- "https://api.fda.gov/animalandveterinary/event.json?search="
  
  if (!is.null(animal_species)) {
    animal_query <- paste0("animal.species:", animal_species)
    query <- paste0(animal_query)
  } else {
    query <- ""
  }
  
  full_url <- paste0(base_url, query, "&count=", cat_var)
  
  return(full_url)
}

```

```{r}

a_contig_url <- animal_contig_table_url(animal_species = "Horse", cat_var ="reaction.veddra_term_name.exact" )
a_contig_url
```

### Creating Subset tables Query

#### Humans

```{r}
human_subset_url <- function(start_date, end_date, patient_sex = NULL, age_min = NULL, age_max = NULL) {
  base_url <- "https://api.fda.gov/drug/event.json?search="
  
  date_range <- paste0("receivedate:[", start_date, "+TO+", end_date, "]")
  
  query <- date_range
  
  if (!is.null(patient_sex)) {
    sex <- paste0("patient.patientsex:", patient_sex)
    query <- paste0(query, "+AND+", sex)
  }
  
  if (!is.null(age_min) && !is.null(age_max)) {
    age_range <- paste0("patient.patientonsetage:[", age_min, "+TO+", age_max, "]")
    query <- paste0(query, "+AND+", age_range)
  }
  
  full_url <- paste0(base_url, query, "&limit=1000")
  
  return(full_url)
}
```

```{r}
h_subset_url <- human_subset_url(start_date, end_date)

h_subset_url
```

#### Animals

```{r}
animal_subset_url <- function(animal_species = NULL) {
  base_url <- "https://api.fda.gov/animalandveterinary/event.json?search="
  
  if (!is.null(animal_species)) {
    animal_query <- paste0("animal.species:", animal_species)
    query <- paste0(animal_query)
  } else {
    query <- ""
  }
  
  full_url <- paste0(base_url, query, "&limit=1000")
  
  return(full_url)
}
```

```{r}
a_subset_url <- animal_subset_url()
a_subset_url
```

```{r}
library(httr)
library(jsonlite)
library(tidyverse)
```

```{r}
h_contig_data <- GET(h_contig_url)
h_contig_data <- rawToChar(h_contig_data$content)
h_contig_data <- fromJSON(h_contig_data)
head(h_contig_data$results)
```

```{r}
a_subset_data <- GET(a_subset_url)
a_subset_data <- rawToChar(a_subset_data$content)
a_subset_data <- fromJSON(a_subset_data)
head(a_subset_data$results)
```

```{r}
head(a_subset_data$results$duration)
```

```{r}
sd(as.numeric(a_subset_data$results$duration$value),na.rm = TRUE)
```

```{r}
a_subset_data$results$number_of_animals_treated <- as.numeric(a_subset_data$results$number_of_animals_treated)
```

```{r}
h_subset_data <- GET(h_subset_url)
h_subset_data <- rawToChar(h_subset_data$content)
h_subset_data <- fromJSON(h_subset_data)
head(h_subset_data$results)
```

```{r}
max(as.numeric(h_subset_data$results$seriousnessdisabling))
```

## Graphs:

```{r}
library(ggplot2)
```

#### Bar Chart for Animal Reactions

```{r}
api_query <- function (query_url) {
  response <- GET(query_url)
  data <- rawToChar(response$content)
  result <- fromJSON(data)
  return(result$results)
}
```

```{r}
species <- c("Cat","Dog","Horse","Cattle")
url <- animal_contig_table_url(animal_species = species[2], cat_var = "reaction.veddra_term_name.exact")
url
```

```{r}
names(url) <- species[2]
```

```{r}
animal_data <- api_query(url)
animal_data
```

```{r}
library(glue)
ggplot(animal_data[1:10,], aes(x = term, y = count, fill = term)) +
    geom_bar( stat = "identity") +
    theme_modern() +
    xlab("Adverse Events") +
    ylab("Reactions") +
    labs(fill = "Reactions") +
    theme(
        legend.position = "right",
        legend.key.size = unit(.5, 'cm'), 
        legend.key.height = unit(.5, 'cm'), 
        legend.key.width = unit(.5, 'cm'), 
        legend.title = element_text(size=7), 
        legend.text = element_text(size=5),
        axis.text.x = element_blank()) + 
    labs(title = glue("Top 10 Reaction for {species[2]} in adverse event"))
```

#### Violin-Density Charts for Treatment Durations

```{r}
head(a_subset_data$results)
```

```{r}
animal_subset <- a_subset_data$results
animal_subset$animal_type <- animal_subset$animal$species
animal_subset$treatment_duration <- as.numeric(animal_subset$duration$value)
head(animal_subset)
```

```{r}
library(see)
library(easystats)

ggplot(animal_subset[animal_subset$animal_type %in% c("Cat","Dog","Horse","Cattle"),], aes(x = animal_type, y = treatment_duration, fill = animal_type)) +
  geom_violindot(fill_dots = "black") +
  theme_modern() +
  scale_fill_material_d()
```

#### Time Series charts of adverse events

```{r}
#Adverse animal reports for given year
animal_subset$year <- substr(animal_subset$original_receive_date,start = 1,stop = 4)

animal_subset$event <- 1

animal_timeseries_subset<-animal_subset |>
  select(animal_type,year,event) |>
  group_by(animal_type,year)|>
  summarise(Adverse_event_reports = n())
```

```{r}
binned <- function(x){
  x <- sort(as.vector(x))
  x <- base::seq(from= min(x),to = max(x),by= round(length(x)/10))
  return(x)
}


ggplot(data = animal_timeseries_subset[animal_timeseries_subset$animal_type %in% c("Cat","Dog","Horse","Cattle"),], aes(x = year, y = Adverse_event_reports, group = 1)) +
  geom_line(color = "blue", size = 1.2) + 
  facet_wrap(~ animal_type) +
  scale_x_discrete(breaks= binned(animal_timeseries_subset$year)) +
  theme_radar() +
  labs(title = "Adverse Events over time",
       x = "Year",
       y = "Number of Adverse Event Reports") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

#### Heat Map:

```{r}
animal_subset$month <- as.numeric(substr(animal_subset$original_receive_date,start = 5,stop = 6))

animal_subset$month <- month.name[animal_subset$month]

two_way_animal_contg <- animal_subset |>
  select(month,year,event) |>
  group_by(year,month)|>
  summarise(Adverse_event_reports = n())
two_way_animal_contg
```

```{r}

library(reshape2)

# Assuming you already have two_way_animal_contg from your code

# Convert month and year to factors to maintain order in the heatmap


# Plotting the heatmap
ggplot(data = two_way_animal_contg, aes(x = year, y = month, fill = Adverse_event_reports)) +
  geom_raster(interpolate = TRUE) +
  scale_fill_gradient(low = "white", high = "purple") +
  scale_x_discrete(breaks= binned(animal_timeseries_subset$year)) +
  labs(title = "Heatmap of Adverse Events by Month and Year",
       x = "Year",
       y = "Month",
       fill = "Adverse Event Reports") +
  theme_classic() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).
